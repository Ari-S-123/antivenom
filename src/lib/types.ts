/**
 * Type definitions for AntiVenom - Autonomous AI Defense Platform
 */

/**
 * Source types for threat discovery
 */
export type SourceType = "github" | "reddit" | "cve";

/**
 * Shape of items returned by Apify dataset for our ingestion flows.
 * Only properties that we consume are typed; all others are ignored.
 */
export type ApifyDatasetItem = {
  /** Direct URL of the scraped page, when present */
  url?: string;
  /** Original request metadata from Apify, if available */
  request?: {
    /** URL of the request, used as a fallback when item.url is missing */
    url?: string;
  };
  /** Extracted text content from scraper */
  text?: unknown;
  /** Alternative payload some actors emit */
  pageFunctionResult?: unknown;
  /** Markdown content if scraper emits it */
  markdown?: unknown;
};

/**
 * Attack types for prompt injection threats
 */
export type AttackType = "instruction_override" | "role_manipulation" | "prompt_extraction" | "encoding_trick";

/**
 * Threat entity representing a discovered attack pattern
 */
export type Threat = {
  /** Unique identifier */
  id: number;
  /** Human-readable title */
  title: string;
  /** The actual attack text/pattern */
  attack_pattern: string;
  /** URL where the threat was discovered */
  source_url: string;
  /** Type of source (github, reddit, cve) */
  source_type: SourceType;
  /** ISO 8601 timestamp of discovery */
  discovered_at: string;
  /** Whether this threat has been validated */
  tested: boolean;
  /** If tested, whether it was effective (optional) */
  effective?: boolean;
};

/**
 * Validation result from GPT-5 analysis
 */
export type ValidationResult = {
  /** Whether the attack is effective */
  is_effective: boolean;
  /** Type of attack detected */
  attack_type: AttackType;
  /** Confidence score (0-1) */
  confidence: number;
  /** Human-readable explanation */
  explanation: string;
  /** Attack vector description */
  attack_vector: string;
};

/**
 * Machine-applyable defense rule specification
 */
export type DefenseRuleSpec = {
  /** Unique rule identifier (must match rule_id of the defense) */
  rule_id: string;
  /** Attack type classification */
  attack_type: AttackType;
  /** Regex patterns compiled by the engine */
  patterns: string[];
  /** Regex flags applied globally to patterns (e.g., "i" for case-insensitive) */
  flags?: string;
  /** If true, block when any pattern matches; if false, allow unless all patterns match */
  block_if_matches: boolean;
  /** Human-readable description for logs/UX */
  description: string;
  /** Semantic version of the rule schema */
  version: string;
};

/**
 * Defense rule generated by GPT-5
 */
export type DefenseRule = {
  /** Unique rule identifier */
  rule_id: string;
  /** Associated threat ID */
  threat_id: number;
  /** Type of attack this defends against */
  attack_type: AttackType;
  /** Generated Python defense code */
  defense_code: string;
  /** Confidence in defense effectiveness (0-1) */
  confidence: number;
  /** ISO 8601 timestamp of creation */
  created_at: string;
  /** Whether deployed to Redpanda */
  deployed: boolean;
  /** Machine-applyable spec used by the runtime engine */
  rule_spec: DefenseRuleSpec;
};

/**
 * System statistics for dashboard
 */
export type Stats = {
  /** Total threats discovered */
  total_threats: number;
  /** Number of tested threats */
  tested_threats: number;
  /** Number of effective threats */
  effective_threats: number;
  /** Number of defenses generated */
  defenses_generated: number;
  /** Whether streaming is active */
  streaming_active: boolean;
};

/**
 * Response from test-attack API endpoint
 */
export type TestAttackResponse = {
  /** Threat ID that was tested */
  threat_id: number;
  /** Validation result from GPT-5 */
  validation: ValidationResult;
  /** Generated defense rule (null if attack ineffective) */
  defense: DefenseRule | null;
  /** Status message */
  message: string;
};
